#include "solver/executor/executor.hpp"
#include "conduit/conduit.hpp"

void korali::solver::Executor::initialize()
{
 // Initializing variable defaults
 _executionProblem = dynamic_cast<korali::problem::Execution*>(_k->_problem);

 if (_executionProblem == NULL)
   korali::logError("Executor solver can only solve problems of type 'Execution'.\n");

 _sampleCount   = _k->_variables[0]->_loadedValues.size();
 _variableCount = _k->_variables.size();

}

void korali::solver::Executor::runGeneration()
{
  _maxModelEvaluations     = std::min(_maxModelEvaluations, _sampleCount);
  _executionsPerGeneration = std::min(_executionsPerGeneration, _maxModelEvaluations - _modelEvaluationCount);
  
  std::vector<korali::Sample> samples(_executionsPerGeneration);
  for (size_t i = 0; i < _executionsPerGeneration; i++)
  {
    
    printf("c %zu mme % zu epg %zu\n", _modelEvaluationCount, _maxModelEvaluations, _executionsPerGeneration);
    std::vector<double> sampleData;
    for (size_t j = 0; j < _variableCount; j++) sampleData.push_back(_k->_variables[j]->_loadedValues[_modelEvaluationCount]);
    //for (size_t j = 0; j < _variableCount; j++) sampleData[j] = _k->_variables[j]->_loadedValues[_modelEvaluationCount];

    korali::logInfo("Detailed", "Running sample %zu with values:\n         ", _modelEvaluationCount);
    for(auto& x : sampleData) korali::logData("Detailed", " %le   ", x);
    korali::logData("Detailed", "\n");

    samples[i]["Operation"]  = "Execute";
    samples[i]["Parameters"] = sampleData;
    samples[i]["Sample Id"]  = _modelEvaluationCount;
    _modelEvaluationCount++;
    _k->_conduit->start(samples[i]);
    printf(" end loop gen \n");
  }

    printf(" end gen1 \n");
  _k->_conduit->waitAll(samples);
    printf(" end gen2 \n");
}

void korali::solver::Executor::printGenerationBefore()
{
}

void korali::solver::Executor::printGenerationAfter()
{
 korali::logInfo("Minimal", "Total Executions %lu.\n", _modelEvaluationCount);
}
